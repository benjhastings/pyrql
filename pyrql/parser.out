Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> toplevel
Rule 1     toplevel -> calls
Rule 2     calls -> call COMMA calls
Rule 3     calls -> call
Rule 4     call -> NAME EQUALS const
Rule 5     call -> NAME EQUALS NAME EQUALS const
Rule 6     call -> arg AND arg
Rule 7     call -> arg OR arg
Rule 8     call -> NAME LPAREN arglist RPAREN
Rule 9     call -> NAME LPAREN RPAREN
Rule 10    call -> SORT LPAREN sort_arglist RPAREN
Rule 11    arg -> LPAREN arglist RPAREN
Rule 12    arg -> LPAREN arg RPAREN
Rule 13    arglist -> arg COMMA arglist
Rule 14    arglist -> arg
Rule 15    sort_arglist -> sort_arg COMMA sort_arglist
Rule 16    sort_arglist -> sort_arg
Rule 17    sort_arg -> sort_prefix arg
Rule 18    sort_arg -> arg
Rule 19    sort_prefix -> PLUS
Rule 20    sort_prefix -> MINUS
Rule 21    arg -> const
Rule 22    arg -> call
Rule 23    const -> BOOL_TRUE
Rule 24    const -> BOOL_FALSE
Rule 25    const -> NULL
Rule 26    const -> NAME
Rule 27    const -> ICONST
Rule 28    const -> FCONST

Terminals, with rules where they appear

AND                  : 6
BOOL_FALSE           : 24
BOOL_TRUE            : 23
COMMA                : 2 13 15
EQUALS               : 4 5 5
FCONST               : 28
ICONST               : 27
LPAREN               : 8 9 10 11 12
MINUS                : 20
NAME                 : 4 5 5 8 9 26
NULL                 : 25
OR                   : 7
PLUS                 : 19
RPAREN               : 8 9 10 11 12
SORT                 : 10
error                : 

Nonterminals, with rules where they appear

arg                  : 6 6 7 7 12 13 14 17 18
arglist              : 8 11 13
call                 : 2 3 22
calls                : 1 2
const                : 4 5 21
sort_arg             : 15 16
sort_arglist         : 10 15
sort_prefix          : 17
toplevel             : 0

Parsing method: LALR

state 0

    (0) S' -> . toplevel
    (1) toplevel -> . calls
    (2) calls -> . call COMMA calls
    (3) calls -> . call
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST

    NAME            shift and go to state 11
    SORT            shift and go to state 7
    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2

    calls                          shift and go to state 3
    call                           shift and go to state 13
    toplevel                       shift and go to state 5
    const                          shift and go to state 9
    arg                            shift and go to state 8

state 1

    (11) arg -> LPAREN . arglist RPAREN
    (12) arg -> LPAREN . arg RPAREN
    (13) arglist -> . arg COMMA arglist
    (14) arglist -> . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 16
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2
    SORT            shift and go to state 7

    call                           shift and go to state 14
    const                          shift and go to state 9
    arg                            shift and go to state 15
    arglist                        shift and go to state 17

state 2

    (28) const -> FCONST .

    AND             reduce using rule 28 (const -> FCONST .)
    OR              reduce using rule 28 (const -> FCONST .)
    COMMA           reduce using rule 28 (const -> FCONST .)
    RPAREN          reduce using rule 28 (const -> FCONST .)
    $end            reduce using rule 28 (const -> FCONST .)


state 3

    (1) toplevel -> calls .

    $end            reduce using rule 1 (toplevel -> calls .)


state 4

    (23) const -> BOOL_TRUE .

    AND             reduce using rule 23 (const -> BOOL_TRUE .)
    OR              reduce using rule 23 (const -> BOOL_TRUE .)
    COMMA           reduce using rule 23 (const -> BOOL_TRUE .)
    RPAREN          reduce using rule 23 (const -> BOOL_TRUE .)
    $end            reduce using rule 23 (const -> BOOL_TRUE .)


state 5

    (0) S' -> toplevel .



state 6

    (24) const -> BOOL_FALSE .

    AND             reduce using rule 24 (const -> BOOL_FALSE .)
    OR              reduce using rule 24 (const -> BOOL_FALSE .)
    COMMA           reduce using rule 24 (const -> BOOL_FALSE .)
    RPAREN          reduce using rule 24 (const -> BOOL_FALSE .)
    $end            reduce using rule 24 (const -> BOOL_FALSE .)


state 7

    (10) call -> SORT . LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 18


state 8

    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    AND             shift and go to state 20
    OR              shift and go to state 19


state 9

    (21) arg -> const .

    COMMA           reduce using rule 21 (arg -> const .)
    AND             reduce using rule 21 (arg -> const .)
    OR              reduce using rule 21 (arg -> const .)
    RPAREN          reduce using rule 21 (arg -> const .)
    $end            reduce using rule 21 (arg -> const .)


state 10

    (25) const -> NULL .

    AND             reduce using rule 25 (const -> NULL .)
    OR              reduce using rule 25 (const -> NULL .)
    COMMA           reduce using rule 25 (const -> NULL .)
    RPAREN          reduce using rule 25 (const -> NULL .)
    $end            reduce using rule 25 (const -> NULL .)


state 11

    (4) call -> NAME . EQUALS const
    (5) call -> NAME . EQUALS NAME EQUALS const
    (8) call -> NAME . LPAREN arglist RPAREN
    (9) call -> NAME . LPAREN RPAREN
    (26) const -> NAME .

    EQUALS          shift and go to state 22
    LPAREN          shift and go to state 21
    AND             reduce using rule 26 (const -> NAME .)
    OR              reduce using rule 26 (const -> NAME .)


state 12

    (27) const -> ICONST .

    AND             reduce using rule 27 (const -> ICONST .)
    OR              reduce using rule 27 (const -> ICONST .)
    COMMA           reduce using rule 27 (const -> ICONST .)
    RPAREN          reduce using rule 27 (const -> ICONST .)
    $end            reduce using rule 27 (const -> ICONST .)


state 13

    (2) calls -> call . COMMA calls
    (3) calls -> call .
    (22) arg -> call .

    COMMA           shift and go to state 23
    $end            reduce using rule 3 (calls -> call .)
    AND             reduce using rule 22 (arg -> call .)
    OR              reduce using rule 22 (arg -> call .)


state 14

    (22) arg -> call .

    COMMA           reduce using rule 22 (arg -> call .)
    AND             reduce using rule 22 (arg -> call .)
    OR              reduce using rule 22 (arg -> call .)
    RPAREN          reduce using rule 22 (arg -> call .)
    $end            reduce using rule 22 (arg -> call .)


state 15

    (12) arg -> LPAREN arg . RPAREN
    (13) arglist -> arg . COMMA arglist
    (14) arglist -> arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 24
    COMMA           shift and go to state 25
    AND             shift and go to state 20
    OR              shift and go to state 19

  ! RPAREN          [ reduce using rule 14 (arglist -> arg .) ]


state 16

    (26) const -> NAME .
    (4) call -> NAME . EQUALS const
    (5) call -> NAME . EQUALS NAME EQUALS const
    (8) call -> NAME . LPAREN arglist RPAREN
    (9) call -> NAME . LPAREN RPAREN

    AND             reduce using rule 26 (const -> NAME .)
    OR              reduce using rule 26 (const -> NAME .)
    COMMA           reduce using rule 26 (const -> NAME .)
    RPAREN          reduce using rule 26 (const -> NAME .)
    $end            reduce using rule 26 (const -> NAME .)
    EQUALS          shift and go to state 22
    LPAREN          shift and go to state 21


state 17

    (11) arg -> LPAREN arglist . RPAREN

    RPAREN          shift and go to state 26


state 18

    (10) call -> SORT LPAREN . sort_arglist RPAREN
    (15) sort_arglist -> . sort_arg COMMA sort_arglist
    (16) sort_arglist -> . sort_arg
    (17) sort_arg -> . sort_prefix arg
    (18) sort_arg -> . arg
    (19) sort_prefix -> . PLUS
    (20) sort_prefix -> . MINUS
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    PLUS            shift and go to state 27
    MINUS           shift and go to state 29
    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 16
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2
    SORT            shift and go to state 7

    call                           shift and go to state 14
    sort_arg                       shift and go to state 31
    sort_prefix                    shift and go to state 28
    const                          shift and go to state 9
    arg                            shift and go to state 30
    sort_arglist                   shift and go to state 32

state 19

    (7) call -> arg OR . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 16
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2
    SORT            shift and go to state 7

    call                           shift and go to state 14
    const                          shift and go to state 9
    arg                            shift and go to state 33

state 20

    (6) call -> arg AND . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 16
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2
    SORT            shift and go to state 7

    call                           shift and go to state 14
    const                          shift and go to state 9
    arg                            shift and go to state 34

state 21

    (8) call -> NAME LPAREN . arglist RPAREN
    (9) call -> NAME LPAREN . RPAREN
    (13) arglist -> . arg COMMA arglist
    (14) arglist -> . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    RPAREN          shift and go to state 35
    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 16
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2
    SORT            shift and go to state 7

    call                           shift and go to state 14
    const                          shift and go to state 9
    arg                            shift and go to state 36
    arglist                        shift and go to state 37

state 22

    (4) call -> NAME EQUALS . const
    (5) call -> NAME EQUALS . NAME EQUALS const
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST

    NAME            shift and go to state 38
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2

    const                          shift and go to state 39

state 23

    (2) calls -> call COMMA . calls
    (2) calls -> . call COMMA calls
    (3) calls -> . call
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST

    NAME            shift and go to state 11
    SORT            shift and go to state 7
    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2

    calls                          shift and go to state 40
    call                           shift and go to state 13
    const                          shift and go to state 9
    arg                            shift and go to state 8

state 24

    (12) arg -> LPAREN arg RPAREN .

    COMMA           reduce using rule 12 (arg -> LPAREN arg RPAREN .)
    AND             reduce using rule 12 (arg -> LPAREN arg RPAREN .)
    OR              reduce using rule 12 (arg -> LPAREN arg RPAREN .)
    RPAREN          reduce using rule 12 (arg -> LPAREN arg RPAREN .)
    $end            reduce using rule 12 (arg -> LPAREN arg RPAREN .)


state 25

    (13) arglist -> arg COMMA . arglist
    (13) arglist -> . arg COMMA arglist
    (14) arglist -> . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 16
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2
    SORT            shift and go to state 7

    call                           shift and go to state 14
    const                          shift and go to state 9
    arg                            shift and go to state 36
    arglist                        shift and go to state 41

state 26

    (11) arg -> LPAREN arglist RPAREN .

    COMMA           reduce using rule 11 (arg -> LPAREN arglist RPAREN .)
    AND             reduce using rule 11 (arg -> LPAREN arglist RPAREN .)
    OR              reduce using rule 11 (arg -> LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 11 (arg -> LPAREN arglist RPAREN .)
    $end            reduce using rule 11 (arg -> LPAREN arglist RPAREN .)


state 27

    (19) sort_prefix -> PLUS .

    LPAREN          reduce using rule 19 (sort_prefix -> PLUS .)
    BOOL_TRUE       reduce using rule 19 (sort_prefix -> PLUS .)
    BOOL_FALSE      reduce using rule 19 (sort_prefix -> PLUS .)
    NULL            reduce using rule 19 (sort_prefix -> PLUS .)
    NAME            reduce using rule 19 (sort_prefix -> PLUS .)
    ICONST          reduce using rule 19 (sort_prefix -> PLUS .)
    FCONST          reduce using rule 19 (sort_prefix -> PLUS .)
    SORT            reduce using rule 19 (sort_prefix -> PLUS .)


state 28

    (17) sort_arg -> sort_prefix . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 16
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2
    SORT            shift and go to state 7

    call                           shift and go to state 14
    const                          shift and go to state 9
    arg                            shift and go to state 42

state 29

    (20) sort_prefix -> MINUS .

    LPAREN          reduce using rule 20 (sort_prefix -> MINUS .)
    BOOL_TRUE       reduce using rule 20 (sort_prefix -> MINUS .)
    BOOL_FALSE      reduce using rule 20 (sort_prefix -> MINUS .)
    NULL            reduce using rule 20 (sort_prefix -> MINUS .)
    NAME            reduce using rule 20 (sort_prefix -> MINUS .)
    ICONST          reduce using rule 20 (sort_prefix -> MINUS .)
    FCONST          reduce using rule 20 (sort_prefix -> MINUS .)
    SORT            reduce using rule 20 (sort_prefix -> MINUS .)


state 30

    (18) sort_arg -> arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           reduce using rule 18 (sort_arg -> arg .)
    RPAREN          reduce using rule 18 (sort_arg -> arg .)
    AND             shift and go to state 20
    OR              shift and go to state 19


state 31

    (15) sort_arglist -> sort_arg . COMMA sort_arglist
    (16) sort_arglist -> sort_arg .

    COMMA           shift and go to state 43
    RPAREN          reduce using rule 16 (sort_arglist -> sort_arg .)


state 32

    (10) call -> SORT LPAREN sort_arglist . RPAREN

    RPAREN          shift and go to state 44


state 33

    (7) call -> arg OR arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           reduce using rule 7 (call -> arg OR arg .)
    $end            reduce using rule 7 (call -> arg OR arg .)
    OR              reduce using rule 7 (call -> arg OR arg .)
    RPAREN          reduce using rule 7 (call -> arg OR arg .)
    AND             shift and go to state 20

  ! AND             [ reduce using rule 7 (call -> arg OR arg .) ]
  ! OR              [ shift and go to state 19 ]


state 34

    (6) call -> arg AND arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           reduce using rule 6 (call -> arg AND arg .)
    $end            reduce using rule 6 (call -> arg AND arg .)
    AND             reduce using rule 6 (call -> arg AND arg .)
    OR              reduce using rule 6 (call -> arg AND arg .)
    RPAREN          reduce using rule 6 (call -> arg AND arg .)

  ! AND             [ shift and go to state 20 ]
  ! OR              [ shift and go to state 19 ]


state 35

    (9) call -> NAME LPAREN RPAREN .

    COMMA           reduce using rule 9 (call -> NAME LPAREN RPAREN .)
    $end            reduce using rule 9 (call -> NAME LPAREN RPAREN .)
    AND             reduce using rule 9 (call -> NAME LPAREN RPAREN .)
    OR              reduce using rule 9 (call -> NAME LPAREN RPAREN .)
    RPAREN          reduce using rule 9 (call -> NAME LPAREN RPAREN .)


state 36

    (13) arglist -> arg . COMMA arglist
    (14) arglist -> arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           shift and go to state 25
    RPAREN          reduce using rule 14 (arglist -> arg .)
    AND             shift and go to state 20
    OR              shift and go to state 19


state 37

    (8) call -> NAME LPAREN arglist . RPAREN

    RPAREN          shift and go to state 45


state 38

    (5) call -> NAME EQUALS NAME . EQUALS const
    (26) const -> NAME .

    EQUALS          shift and go to state 46
    COMMA           reduce using rule 26 (const -> NAME .)
    $end            reduce using rule 26 (const -> NAME .)
    AND             reduce using rule 26 (const -> NAME .)
    OR              reduce using rule 26 (const -> NAME .)
    RPAREN          reduce using rule 26 (const -> NAME .)


state 39

    (4) call -> NAME EQUALS const .

    COMMA           reduce using rule 4 (call -> NAME EQUALS const .)
    $end            reduce using rule 4 (call -> NAME EQUALS const .)
    AND             reduce using rule 4 (call -> NAME EQUALS const .)
    OR              reduce using rule 4 (call -> NAME EQUALS const .)
    RPAREN          reduce using rule 4 (call -> NAME EQUALS const .)


state 40

    (2) calls -> call COMMA calls .

    $end            reduce using rule 2 (calls -> call COMMA calls .)


state 41

    (13) arglist -> arg COMMA arglist .

    RPAREN          reduce using rule 13 (arglist -> arg COMMA arglist .)


state 42

    (17) sort_arg -> sort_prefix arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           reduce using rule 17 (sort_arg -> sort_prefix arg .)
    RPAREN          reduce using rule 17 (sort_arg -> sort_prefix arg .)
    AND             shift and go to state 20
    OR              shift and go to state 19


state 43

    (15) sort_arglist -> sort_arg COMMA . sort_arglist
    (15) sort_arglist -> . sort_arg COMMA sort_arglist
    (16) sort_arglist -> . sort_arg
    (17) sort_arg -> . sort_prefix arg
    (18) sort_arg -> . arg
    (19) sort_prefix -> . PLUS
    (20) sort_prefix -> . MINUS
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    PLUS            shift and go to state 27
    MINUS           shift and go to state 29
    LPAREN          shift and go to state 1
    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 16
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2
    SORT            shift and go to state 7

    call                           shift and go to state 14
    sort_arg                       shift and go to state 31
    sort_prefix                    shift and go to state 28
    const                          shift and go to state 9
    arg                            shift and go to state 30
    sort_arglist                   shift and go to state 47

state 44

    (10) call -> SORT LPAREN sort_arglist RPAREN .

    COMMA           reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)
    $end            reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)
    AND             reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)
    OR              reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)
    RPAREN          reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)


state 45

    (8) call -> NAME LPAREN arglist RPAREN .

    COMMA           reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)
    $end            reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)
    AND             reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)
    OR              reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)


state 46

    (5) call -> NAME EQUALS NAME EQUALS . const
    (23) const -> . BOOL_TRUE
    (24) const -> . BOOL_FALSE
    (25) const -> . NULL
    (26) const -> . NAME
    (27) const -> . ICONST
    (28) const -> . FCONST

    BOOL_TRUE       shift and go to state 4
    BOOL_FALSE      shift and go to state 6
    NULL            shift and go to state 10
    NAME            shift and go to state 48
    ICONST          shift and go to state 12
    FCONST          shift and go to state 2

    const                          shift and go to state 49

state 47

    (15) sort_arglist -> sort_arg COMMA sort_arglist .

    RPAREN          reduce using rule 15 (sort_arglist -> sort_arg COMMA sort_arglist .)


state 48

    (26) const -> NAME .

    COMMA           reduce using rule 26 (const -> NAME .)
    $end            reduce using rule 26 (const -> NAME .)
    AND             reduce using rule 26 (const -> NAME .)
    OR              reduce using rule 26 (const -> NAME .)
    RPAREN          reduce using rule 26 (const -> NAME .)


state 49

    (5) call -> NAME EQUALS NAME EQUALS const .

    COMMA           reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)
    $end            reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)
    AND             reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)
    OR              reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)
    RPAREN          reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 15 resolved as shift
