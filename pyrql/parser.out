Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> toplevel
Rule 1     toplevel -> calls
Rule 2     calls -> call COMMA calls
Rule 3     calls -> call
Rule 4     call -> NAME EQUALS const
Rule 5     call -> NAME EQUALS NAME EQUALS const
Rule 6     call -> arg AND arg
Rule 7     call -> arg OR arg
Rule 8     call -> NAME LPAREN arglist RPAREN
Rule 9     call -> NAME LPAREN RPAREN
Rule 10    call -> SORT LPAREN sort_arglist RPAREN
Rule 11    arg -> LPAREN arglist RPAREN
Rule 12    arg -> LPAREN arg RPAREN
Rule 13    arglist -> arg COMMA arglist
Rule 14    arglist -> arg
Rule 15    sort_arglist -> sort_arg COMMA sort_arglist
Rule 16    sort_arglist -> sort_arg
Rule 17    sort_arg -> sort_prefix arg
Rule 18    sort_arg -> arg
Rule 19    sort_prefix -> PLUS
Rule 20    sort_prefix -> MINUS
Rule 21    arg -> const
Rule 22    arg -> call
Rule 23    const -> NAME
Rule 24    const -> ICONST
Rule 25    const -> FCONST

Terminals, with rules where they appear

AND                  : 6
COMMA                : 2 13 15
EQUALS               : 4 5 5
FCONST               : 25
ICONST               : 24
LPAREN               : 8 9 10 11 12
MINUS                : 20
NAME                 : 4 5 5 8 9 23
OR                   : 7
PLUS                 : 19
RPAREN               : 8 9 10 11 12
SORT                 : 10
error                : 

Nonterminals, with rules where they appear

arg                  : 6 6 7 7 12 13 14 17 18
arglist              : 8 11 13
call                 : 2 3 22
calls                : 1 2
const                : 4 5 21
sort_arg             : 15 16
sort_arglist         : 10 15
sort_prefix          : 17
toplevel             : 0

Parsing method: LALR

state 0

    (0) S' -> . toplevel
    (1) toplevel -> . calls
    (2) calls -> . call COMMA calls
    (3) calls -> . call
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST

    NAME            shift and go to state 3
    SORT            shift and go to state 9
    LPAREN          shift and go to state 2
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4

    calls                          shift and go to state 6
    toplevel                       shift and go to state 7
    const                          shift and go to state 1
    call                           shift and go to state 5
    arg                            shift and go to state 10

state 1

    (21) arg -> const .

    AND             reduce using rule 21 (arg -> const .)
    OR              reduce using rule 21 (arg -> const .)
    COMMA           reduce using rule 21 (arg -> const .)
    $end            reduce using rule 21 (arg -> const .)
    RPAREN          reduce using rule 21 (arg -> const .)


state 2

    (11) arg -> LPAREN . arglist RPAREN
    (12) arg -> LPAREN . arg RPAREN
    (13) arglist -> . arg COMMA arglist
    (14) arglist -> . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 2
    NAME            shift and go to state 11
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4
    SORT            shift and go to state 9

    const                          shift and go to state 1
    call                           shift and go to state 12
    arglist                        shift and go to state 13
    arg                            shift and go to state 14

state 3

    (4) call -> NAME . EQUALS const
    (5) call -> NAME . EQUALS NAME EQUALS const
    (8) call -> NAME . LPAREN arglist RPAREN
    (9) call -> NAME . LPAREN RPAREN
    (23) const -> NAME .

    EQUALS          shift and go to state 16
    LPAREN          shift and go to state 15
    AND             reduce using rule 23 (const -> NAME .)
    OR              reduce using rule 23 (const -> NAME .)


state 4

    (25) const -> FCONST .

    AND             reduce using rule 25 (const -> FCONST .)
    OR              reduce using rule 25 (const -> FCONST .)
    COMMA           reduce using rule 25 (const -> FCONST .)
    RPAREN          reduce using rule 25 (const -> FCONST .)
    $end            reduce using rule 25 (const -> FCONST .)


state 5

    (2) calls -> call . COMMA calls
    (3) calls -> call .
    (22) arg -> call .

    COMMA           shift and go to state 17
    $end            reduce using rule 3 (calls -> call .)
    AND             reduce using rule 22 (arg -> call .)
    OR              reduce using rule 22 (arg -> call .)


state 6

    (1) toplevel -> calls .

    $end            reduce using rule 1 (toplevel -> calls .)


state 7

    (0) S' -> toplevel .



state 8

    (24) const -> ICONST .

    AND             reduce using rule 24 (const -> ICONST .)
    OR              reduce using rule 24 (const -> ICONST .)
    COMMA           reduce using rule 24 (const -> ICONST .)
    RPAREN          reduce using rule 24 (const -> ICONST .)
    $end            reduce using rule 24 (const -> ICONST .)


state 9

    (10) call -> SORT . LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 18


state 10

    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    AND             shift and go to state 19
    OR              shift and go to state 20


state 11

    (23) const -> NAME .
    (4) call -> NAME . EQUALS const
    (5) call -> NAME . EQUALS NAME EQUALS const
    (8) call -> NAME . LPAREN arglist RPAREN
    (9) call -> NAME . LPAREN RPAREN

    AND             reduce using rule 23 (const -> NAME .)
    OR              reduce using rule 23 (const -> NAME .)
    COMMA           reduce using rule 23 (const -> NAME .)
    RPAREN          reduce using rule 23 (const -> NAME .)
    $end            reduce using rule 23 (const -> NAME .)
    EQUALS          shift and go to state 16
    LPAREN          shift and go to state 15


state 12

    (22) arg -> call .

    AND             reduce using rule 22 (arg -> call .)
    OR              reduce using rule 22 (arg -> call .)
    COMMA           reduce using rule 22 (arg -> call .)
    $end            reduce using rule 22 (arg -> call .)
    RPAREN          reduce using rule 22 (arg -> call .)


state 13

    (11) arg -> LPAREN arglist . RPAREN

    RPAREN          shift and go to state 21


state 14

    (12) arg -> LPAREN arg . RPAREN
    (13) arglist -> arg . COMMA arglist
    (14) arglist -> arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 23
    COMMA           shift and go to state 22
    AND             shift and go to state 19
    OR              shift and go to state 20

  ! RPAREN          [ reduce using rule 14 (arglist -> arg .) ]


state 15

    (8) call -> NAME LPAREN . arglist RPAREN
    (9) call -> NAME LPAREN . RPAREN
    (13) arglist -> . arg COMMA arglist
    (14) arglist -> . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    RPAREN          shift and go to state 24
    LPAREN          shift and go to state 2
    NAME            shift and go to state 11
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4
    SORT            shift and go to state 9

    const                          shift and go to state 1
    call                           shift and go to state 12
    arglist                        shift and go to state 25
    arg                            shift and go to state 26

state 16

    (4) call -> NAME EQUALS . const
    (5) call -> NAME EQUALS . NAME EQUALS const
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST

    NAME            shift and go to state 27
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4

    const                          shift and go to state 28

state 17

    (2) calls -> call COMMA . calls
    (2) calls -> . call COMMA calls
    (3) calls -> . call
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST

    NAME            shift and go to state 3
    SORT            shift and go to state 9
    LPAREN          shift and go to state 2
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4

    calls                          shift and go to state 29
    const                          shift and go to state 1
    call                           shift and go to state 5
    arg                            shift and go to state 10

state 18

    (10) call -> SORT LPAREN . sort_arglist RPAREN
    (15) sort_arglist -> . sort_arg COMMA sort_arglist
    (16) sort_arglist -> . sort_arg
    (17) sort_arg -> . sort_prefix arg
    (18) sort_arg -> . arg
    (19) sort_prefix -> . PLUS
    (20) sort_prefix -> . MINUS
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 30
    LPAREN          shift and go to state 2
    NAME            shift and go to state 11
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4
    SORT            shift and go to state 9

    sort_arglist                   shift and go to state 32
    call                           shift and go to state 12
    sort_prefix                    shift and go to state 31
    sort_arg                       shift and go to state 34
    const                          shift and go to state 1
    arg                            shift and go to state 35

state 19

    (6) call -> arg AND . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 2
    NAME            shift and go to state 11
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4
    SORT            shift and go to state 9

    const                          shift and go to state 1
    call                           shift and go to state 12
    arg                            shift and go to state 36

state 20

    (7) call -> arg OR . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 2
    NAME            shift and go to state 11
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4
    SORT            shift and go to state 9

    const                          shift and go to state 1
    call                           shift and go to state 12
    arg                            shift and go to state 37

state 21

    (11) arg -> LPAREN arglist RPAREN .

    AND             reduce using rule 11 (arg -> LPAREN arglist RPAREN .)
    OR              reduce using rule 11 (arg -> LPAREN arglist RPAREN .)
    COMMA           reduce using rule 11 (arg -> LPAREN arglist RPAREN .)
    $end            reduce using rule 11 (arg -> LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 11 (arg -> LPAREN arglist RPAREN .)


state 22

    (13) arglist -> arg COMMA . arglist
    (13) arglist -> . arg COMMA arglist
    (14) arglist -> . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 2
    NAME            shift and go to state 11
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4
    SORT            shift and go to state 9

    const                          shift and go to state 1
    call                           shift and go to state 12
    arglist                        shift and go to state 38
    arg                            shift and go to state 26

state 23

    (12) arg -> LPAREN arg RPAREN .

    AND             reduce using rule 12 (arg -> LPAREN arg RPAREN .)
    OR              reduce using rule 12 (arg -> LPAREN arg RPAREN .)
    COMMA           reduce using rule 12 (arg -> LPAREN arg RPAREN .)
    $end            reduce using rule 12 (arg -> LPAREN arg RPAREN .)
    RPAREN          reduce using rule 12 (arg -> LPAREN arg RPAREN .)


state 24

    (9) call -> NAME LPAREN RPAREN .

    COMMA           reduce using rule 9 (call -> NAME LPAREN RPAREN .)
    AND             reduce using rule 9 (call -> NAME LPAREN RPAREN .)
    OR              reduce using rule 9 (call -> NAME LPAREN RPAREN .)
    RPAREN          reduce using rule 9 (call -> NAME LPAREN RPAREN .)
    $end            reduce using rule 9 (call -> NAME LPAREN RPAREN .)


state 25

    (8) call -> NAME LPAREN arglist . RPAREN

    RPAREN          shift and go to state 39


state 26

    (13) arglist -> arg . COMMA arglist
    (14) arglist -> arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           shift and go to state 22
    RPAREN          reduce using rule 14 (arglist -> arg .)
    AND             shift and go to state 19
    OR              shift and go to state 20


state 27

    (5) call -> NAME EQUALS NAME . EQUALS const
    (23) const -> NAME .

    EQUALS          shift and go to state 40
    COMMA           reduce using rule 23 (const -> NAME .)
    $end            reduce using rule 23 (const -> NAME .)
    AND             reduce using rule 23 (const -> NAME .)
    OR              reduce using rule 23 (const -> NAME .)
    RPAREN          reduce using rule 23 (const -> NAME .)


state 28

    (4) call -> NAME EQUALS const .

    COMMA           reduce using rule 4 (call -> NAME EQUALS const .)
    AND             reduce using rule 4 (call -> NAME EQUALS const .)
    OR              reduce using rule 4 (call -> NAME EQUALS const .)
    RPAREN          reduce using rule 4 (call -> NAME EQUALS const .)
    $end            reduce using rule 4 (call -> NAME EQUALS const .)


state 29

    (2) calls -> call COMMA calls .

    $end            reduce using rule 2 (calls -> call COMMA calls .)


state 30

    (20) sort_prefix -> MINUS .

    LPAREN          reduce using rule 20 (sort_prefix -> MINUS .)
    NAME            reduce using rule 20 (sort_prefix -> MINUS .)
    ICONST          reduce using rule 20 (sort_prefix -> MINUS .)
    FCONST          reduce using rule 20 (sort_prefix -> MINUS .)
    SORT            reduce using rule 20 (sort_prefix -> MINUS .)


state 31

    (17) sort_arg -> sort_prefix . arg
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    LPAREN          shift and go to state 2
    NAME            shift and go to state 11
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4
    SORT            shift and go to state 9

    const                          shift and go to state 1
    call                           shift and go to state 12
    arg                            shift and go to state 41

state 32

    (10) call -> SORT LPAREN sort_arglist . RPAREN

    RPAREN          shift and go to state 42


state 33

    (19) sort_prefix -> PLUS .

    LPAREN          reduce using rule 19 (sort_prefix -> PLUS .)
    NAME            reduce using rule 19 (sort_prefix -> PLUS .)
    ICONST          reduce using rule 19 (sort_prefix -> PLUS .)
    FCONST          reduce using rule 19 (sort_prefix -> PLUS .)
    SORT            reduce using rule 19 (sort_prefix -> PLUS .)


state 34

    (15) sort_arglist -> sort_arg . COMMA sort_arglist
    (16) sort_arglist -> sort_arg .

    COMMA           shift and go to state 43
    RPAREN          reduce using rule 16 (sort_arglist -> sort_arg .)


state 35

    (18) sort_arg -> arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           reduce using rule 18 (sort_arg -> arg .)
    RPAREN          reduce using rule 18 (sort_arg -> arg .)
    AND             shift and go to state 19
    OR              shift and go to state 20


state 36

    (6) call -> arg AND arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           reduce using rule 6 (call -> arg AND arg .)
    AND             reduce using rule 6 (call -> arg AND arg .)
    OR              reduce using rule 6 (call -> arg AND arg .)
    RPAREN          reduce using rule 6 (call -> arg AND arg .)
    $end            reduce using rule 6 (call -> arg AND arg .)

  ! AND             [ shift and go to state 19 ]
  ! OR              [ shift and go to state 20 ]


state 37

    (7) call -> arg OR arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           reduce using rule 7 (call -> arg OR arg .)
    OR              reduce using rule 7 (call -> arg OR arg .)
    RPAREN          reduce using rule 7 (call -> arg OR arg .)
    $end            reduce using rule 7 (call -> arg OR arg .)
    AND             shift and go to state 19

  ! AND             [ reduce using rule 7 (call -> arg OR arg .) ]
  ! OR              [ shift and go to state 20 ]


state 38

    (13) arglist -> arg COMMA arglist .

    RPAREN          reduce using rule 13 (arglist -> arg COMMA arglist .)


state 39

    (8) call -> NAME LPAREN arglist RPAREN .

    COMMA           reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)
    AND             reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)
    OR              reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)
    RPAREN          reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)
    $end            reduce using rule 8 (call -> NAME LPAREN arglist RPAREN .)


state 40

    (5) call -> NAME EQUALS NAME EQUALS . const
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST

    NAME            shift and go to state 44
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4

    const                          shift and go to state 45

state 41

    (17) sort_arg -> sort_prefix arg .
    (6) call -> arg . AND arg
    (7) call -> arg . OR arg

    COMMA           reduce using rule 17 (sort_arg -> sort_prefix arg .)
    RPAREN          reduce using rule 17 (sort_arg -> sort_prefix arg .)
    AND             shift and go to state 19
    OR              shift and go to state 20


state 42

    (10) call -> SORT LPAREN sort_arglist RPAREN .

    COMMA           reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)
    AND             reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)
    OR              reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)
    RPAREN          reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)
    $end            reduce using rule 10 (call -> SORT LPAREN sort_arglist RPAREN .)


state 43

    (15) sort_arglist -> sort_arg COMMA . sort_arglist
    (15) sort_arglist -> . sort_arg COMMA sort_arglist
    (16) sort_arglist -> . sort_arg
    (17) sort_arg -> . sort_prefix arg
    (18) sort_arg -> . arg
    (19) sort_prefix -> . PLUS
    (20) sort_prefix -> . MINUS
    (11) arg -> . LPAREN arglist RPAREN
    (12) arg -> . LPAREN arg RPAREN
    (21) arg -> . const
    (22) arg -> . call
    (23) const -> . NAME
    (24) const -> . ICONST
    (25) const -> . FCONST
    (4) call -> . NAME EQUALS const
    (5) call -> . NAME EQUALS NAME EQUALS const
    (6) call -> . arg AND arg
    (7) call -> . arg OR arg
    (8) call -> . NAME LPAREN arglist RPAREN
    (9) call -> . NAME LPAREN RPAREN
    (10) call -> . SORT LPAREN sort_arglist RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 30
    LPAREN          shift and go to state 2
    NAME            shift and go to state 11
    ICONST          shift and go to state 8
    FCONST          shift and go to state 4
    SORT            shift and go to state 9

    sort_arglist                   shift and go to state 46
    call                           shift and go to state 12
    sort_prefix                    shift and go to state 31
    sort_arg                       shift and go to state 34
    const                          shift and go to state 1
    arg                            shift and go to state 35

state 44

    (23) const -> NAME .

    COMMA           reduce using rule 23 (const -> NAME .)
    $end            reduce using rule 23 (const -> NAME .)
    AND             reduce using rule 23 (const -> NAME .)
    OR              reduce using rule 23 (const -> NAME .)
    RPAREN          reduce using rule 23 (const -> NAME .)


state 45

    (5) call -> NAME EQUALS NAME EQUALS const .

    COMMA           reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)
    AND             reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)
    OR              reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)
    RPAREN          reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)
    $end            reduce using rule 5 (call -> NAME EQUALS NAME EQUALS const .)


state 46

    (15) sort_arglist -> sort_arg COMMA sort_arglist .

    RPAREN          reduce using rule 15 (sort_arglist -> sort_arg COMMA sort_arglist .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 14 resolved as shift
